{"version":3,"sources":["constants/constants.js","components/EvidenceOptions.js","components/ListContainer.js","components/EvidenceContainer.js","App.js","reportWebVitals.js","index.js"],"names":["evidenceDictionary","emfLevelFive","ghostWriting","fingerPrints","spiritBox","freezingTemperatures","ghostOrb","ghostList","name","evidence","EvidenceOptions","props","console","log","toggleEvidence","className","Object","keys","map","e","isSelected","onClick","renderEvidence","ListContainer","title","contentList","content","EvidenceContainer","renderGhosts","ghost","evidenceKey","updatedEvidence","state","evaluateEvidenceStates","setState","selectedEvidence","currentEvidence","filter","eKey","possibleGhosts","impossibleGhosts","possibleRemainingEvidenceSet","Set","forEach","every","includes","push","add","possibleRemainingEvidence","evidenceName","evidenceObject","isEnabled","this","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAAMA,EAAqB,CACvBC,aAAc,cACdC,aAAc,gBACdC,aAAc,eACdC,UAAW,aACXC,qBAAsB,wBACtBC,SAAU,aAGRC,EAAY,CACd,CACIC,KAAM,UACNC,SAAU,CAAC,cAAe,eAAgB,0BAE9C,CACID,KAAM,QACNC,SAAU,CAAC,gBAAiB,aAAc,0BAE9C,CACID,KAAM,OACNC,SAAU,CAAC,cAAe,aAAc,cAE5C,CACID,KAAM,OACNC,SAAU,CAAC,aAAc,wBAAyB,cAEtD,CACID,KAAM,MACNC,SAAU,CAAC,cAAe,gBAAiB,eAE/C,CACID,KAAM,UACNC,SAAU,CAAC,cAAe,wBAAyB,cAEvD,CACID,KAAM,cACNC,SAAU,CAAC,eAAgB,aAAc,cAE7C,CACID,KAAM,WACNC,SAAU,CAAC,cAAe,gBAAiB,iBAE/C,CACID,KAAM,QACNC,SAAU,CAAC,cAAe,gBAAiB,cAE/C,CACID,KAAM,SACNC,SAAU,CAAC,gBAAiB,eAAgB,eAEhD,CACID,KAAM,SACNC,SAAU,CAAC,eAAgB,aAAc,0BAE7C,CACID,KAAM,QACNC,SAAU,CAAC,gBAAiB,wBAAyB,eCzB9CC,EA5BS,SAACC,GACrBC,QAAQC,IAAI,cAeZ,OACI,8BAfiB,WAAO,IAChBC,EAA6BH,EAA7BG,eAAgBL,EAAaE,EAAbF,SAExB,OAAO,qBAAKM,UAAU,2BAAf,SACFC,OAAOC,KAAKR,GAAUS,KAAI,SAAAC,GAAC,OACxB,qBACIJ,UAAWN,EAASU,GAAGC,WAAa,OAAS,GAE7CC,QAAS,kBAAMP,EAAeK,IAHlC,SAIKV,EAASU,GAAGX,MAFRW,QASZG,MCMEC,EAxBO,SAACZ,GAWnB,OACI,gCACI,6BAAKA,EAAMa,QAXR,qBAAKT,UAAU,gBAAf,SACFJ,EAAMc,YAAYP,KAAI,SAAAQ,GAAO,OAC1B,8BAEKA,EAAQlB,MADJkB,EAAQlB,eCmJlBmB,E,kDArJX,WAAYhB,GAAQ,IAAD,uBACf,cAAMA,IAkBViB,aAAe,WACX,OAAOrB,EAAUW,KAAI,SAAAW,GACjB,OAAO,gCACH,8BAAK,4BAAIA,EAAMrB,SACf,8BAAMqB,EAAMpB,SAAS,KACrB,8BAAMoB,EAAMpB,SAAS,KACrB,8BAAMoB,EAAMpB,SAAS,KACrB,8BA1BO,EA+BnBK,eAAiB,SAACgB,GAGd,IAAIC,EAAkB,EAAKC,MAAMvB,SAEjCsB,EAAgBD,GAAaV,YAAcW,EAAgBD,GAAaV,WAKxE,EAAKa,uBAAuBF,GAG5B,EAAKG,SAAS,CAAEC,iBAAkBJ,KA5CnB,EAiDnBE,uBAAyB,SAACG,GAKtB,IAAMD,EAAmBnB,OAAOC,KAAKmB,GAChCC,QAAO,SAACC,GAAD,OAAUF,EAAgBE,GAAMlB,cACvCF,KAAI,SAAAoB,GAAI,OAAIF,EAAgBE,GAAM9B,QAUjC+B,EAAiB,GACjBC,EAAmB,GAEnBC,EAA+B,IAAIC,IAEzCnC,EAAUoC,SAAQ,SAAAd,GACVM,EACCS,OAAM,SAAAnC,GAAQ,OAAIoB,EAAMpB,SACpBoC,SAASpC,OACd8B,EAAeO,KAAKjB,GAEDA,EAAMpB,SAAS4B,QAAO,SAAAlB,GAAC,OAAKgB,EAAiBU,SAAS1B,MAE9DwB,SAAQ,SAAAxB,GAAC,OAAIsB,EAA6BM,IAAI5B,OAGzDqB,EAAiBM,KAAKjB,MAQ9B,IAAImB,EAA4B,GAEhCP,EAA6BE,SAAQ,SAAAM,GAAY,OAAID,EAA0BF,KAAK,CAAEtC,KAAMyC,OAE5FrC,QAAQC,IAAImC,GAEZ,EAAKd,SAAS,CACVK,eAAgBA,EAChBC,iBAAkBA,EAClBQ,0BAA2BA,KAhG/B,IAAIE,EAAiB,GAHN,OAKflC,OAAOC,KAAKjB,GAAoB2C,SAAQ,SAAAxB,GAAC,OAAI+B,EAAe/B,GAAK,CAC7DX,KAAMR,EAAmBmB,GACzBC,YAAY,EACZ+B,WAAW,MAGf,EAAKnB,MAAQ,CACTvB,SAAUyC,EACVX,eAAgBhC,EAChBiC,iBAAkB,GAClBQ,0BAA2B,IAfhB,E,qDAwGf,OACI,gCACI,cAAC,EAAD,CACIlC,eAAgBsC,KAAKtC,eACrBL,SAAU2C,KAAKpB,MAAMvB,WACzB,uBACA,cAAC,EAAD,CACIe,MAAM,8BACNC,YAAa2B,KAAKpB,MAAMgB,4BAE5B,uBACA,cAAC,EAAD,CACIxB,MAAM,kBACNC,YAAa2B,KAAKpB,MAAMO,iBAE5B,uBACA,cAAC,EAAD,CACIf,MAAM,oBACNC,YAAa2B,KAAKpB,MAAMQ,0B,GA3HZa,a,MCMjBC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5c816cc6.chunk.js","sourcesContent":["const evidenceDictionary = {\r\n    emfLevelFive: 'EMF Level 5',\r\n    ghostWriting: 'Ghost Writing',\r\n    fingerPrints: 'Fingerprints',\r\n    spiritBox: 'Spirit Box',\r\n    freezingTemperatures: 'Freezing Temperatures',\r\n    ghostOrb: 'Ghost Orb'\r\n};\r\n\r\nconst ghostList = [\r\n    {\r\n        name: 'Banshee',\r\n        evidence: ['EMF Level 5', 'Fingerprints', 'Freezing Temperatures']\r\n    },\r\n    {\r\n        name: 'Demon',\r\n        evidence: ['Ghost Writing', 'Spirit Box', 'Freezing Temperatures']\r\n    },\r\n    {\r\n        name: 'Jinn',\r\n        evidence: ['EMF Level 5', 'Spirit Box', 'Ghost Orb']\r\n    },\r\n    {\r\n        name: 'Mare',\r\n        evidence: ['Spirit Box', 'Freezing Temperatures', 'Ghost Orb']\r\n    },\r\n    {\r\n        name: 'Oni',\r\n        evidence: ['EMF Level 5', 'Ghost Writing', 'Spirit Box']\r\n    },\r\n    {\r\n        name: 'Phantom',\r\n        evidence: ['EMF Level 5', 'Freezing Temperatures', 'Ghost Orb']\r\n    },\r\n    {\r\n        name: 'Poltergeist',\r\n        evidence: ['Fingerprints', 'Spirit Box', 'Ghost Orb']\r\n    },\r\n    {\r\n        name: 'Revenant',\r\n        evidence: ['EMF Level 5', 'Ghost Writing', 'Fingerprints']\r\n    },\r\n    {\r\n        name: 'Shade',\r\n        evidence: ['EMF Level 5', 'Ghost Writing', 'Ghost Orb']\r\n    },\r\n    {\r\n        name: 'Spirit',\r\n        evidence: ['Ghost Writing', 'Fingerprints', 'Spirit Box']\r\n    },\r\n    {\r\n        name: 'Wraith',\r\n        evidence: ['Fingerprints', 'Spirit Box', 'Freezing Temperatures']\r\n    },\r\n    {\r\n        name: 'Yurei',\r\n        evidence: ['Ghost Writing', 'Freezing Temperatures', 'Ghost Orb']\r\n    }\r\n];\r\n\r\nexport { ghostList, evidenceDictionary }","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst EvidenceOptions = (props) => {\r\n    console.log(\"rerendered\")\r\n    let renderEvidence = () => {\r\n        const { toggleEvidence, evidence } = props;\r\n\r\n        return <div className=\"evidenceOptionsContainer\">\r\n            {Object.keys(evidence).map(e =>\r\n                <div\r\n                    className={evidence[e].isSelected ? \"glow\" : \"\"}\r\n                    key={e}\r\n                    onClick={() => toggleEvidence(e)}>\r\n                    {evidence[e].name}\r\n                </div>)}\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {renderEvidence()}\r\n        </div>\r\n    )\r\n}\r\n\r\nEvidenceOptions.propTypes = {\r\n    toggleEvidence: PropTypes.func.isRequired,\r\n    evidence: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default EvidenceOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ListContainer = (props) => {\r\n    let renderContents = () => {\r\n        return <div className=\"listContainer\">\r\n            {props.contentList.map(content =>\r\n                <div\r\n                    key={content.name}>\r\n                    {content.name}\r\n                </div>)}\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>{props.title}</h2>\r\n            {renderContents()}\r\n        </div>\r\n    )\r\n}\r\n\r\nListContainer.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    contentList: PropTypes.array.isRequired\r\n}\r\n\r\nexport default ListContainer;","import React, { Component } from 'react';\r\nimport { evidenceDictionary, ghostList } from '../constants/constants'\r\nimport EvidenceOptions from './EvidenceOptions';\r\nimport ListContainer from './ListContainer';\r\n\r\nclass EvidenceContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let evidenceObject = {}\r\n\r\n        Object.keys(evidenceDictionary).forEach(e => evidenceObject[e] = {\r\n            name: evidenceDictionary[e],\r\n            isSelected: false,\r\n            isEnabled: true\r\n        });\r\n\r\n        this.state = {\r\n            evidence: evidenceObject,\r\n            possibleGhosts: ghostList,\r\n            impossibleGhosts: [],\r\n            possibleRemainingEvidence: []\r\n        }\r\n    }\r\n\r\n    renderGhosts = () => {\r\n        return ghostList.map(ghost => {\r\n            return <div>\r\n                <div><b>{ghost.name}</b></div>\r\n                <div>{ghost.evidence[0]}</div>\r\n                <div>{ghost.evidence[1]}</div>\r\n                <div>{ghost.evidence[2]}</div>\r\n                <hr />\r\n            </div>\r\n        })\r\n    }\r\n\r\n    toggleEvidence = (evidenceKey) => {\r\n        // condense this method\r\n\r\n        let updatedEvidence = this.state.evidence;\r\n\r\n        updatedEvidence[evidenceKey].isSelected = !updatedEvidence[evidenceKey].isSelected;\r\n\r\n        // logic to evalute evidence states should be done at the end of a toggle\r\n        // i.e Enabling previously disabled evidence, disabling impossible evidence\r\n\r\n        this.evaluateEvidenceStates(updatedEvidence);\r\n\r\n        // set state is async, probs do this AFTER evaluation of states\r\n        this.setState({ selectedEvidence: updatedEvidence });\r\n\r\n        // have a clear button?\r\n    }\r\n\r\n    evaluateEvidenceStates = (currentEvidence) => {\r\n        // I am having an issue with names\r\n        // we have evidence in the state which is an object with ALL evidence and is used for tracking what is clicked and what isnt\r\n        // THEN we have to get the evidence objects that are selected\r\n\r\n        const selectedEvidence = Object.keys(currentEvidence)\r\n            .filter((eKey) => currentEvidence[eKey].isSelected)\r\n            .map(eKey => currentEvidence[eKey].name);\r\n\r\n        // loop through the ghost list and collect all the names of ghosts that contain\r\n        // the selected evidence\r\n\r\n        // maybe add all the ghosts that dont match the evidence\r\n        // need to find the set difference ?\r\n        // FOCUS ON ALL THE POSSIBLE GHOSTS AND POSSIBLE REMAINING EVIDENCE FIRST\r\n\r\n        // this below has nothing to do with validating evidence states\r\n        const possibleGhosts = [];\r\n        const impossibleGhosts = [];\r\n\r\n        const possibleRemainingEvidenceSet = new Set();\r\n\r\n        ghostList.forEach(ghost => {\r\n            if (selectedEvidence\r\n                .every(evidence => ghost.evidence\r\n                    .includes(evidence))) {\r\n                possibleGhosts.push(ghost);\r\n\r\n                const difference = ghost.evidence.filter(e => !selectedEvidence.includes(e));\r\n\r\n                difference.forEach(e => possibleRemainingEvidenceSet.add(e));\r\n\r\n            } else {\r\n                impossibleGhosts.push(ghost);\r\n            }\r\n        });\r\n\r\n        // do similar logic but now we check for evidence that is NOT in the possible evidence?\r\n        // maybe instead of adding it each time in the ELSE up above I can just find the set difference between all the\r\n        // possible evidence and all evidence\r\n\r\n        let possibleRemainingEvidence = [];\r\n\r\n        possibleRemainingEvidenceSet.forEach(evidenceName => possibleRemainingEvidence.push({ name: evidenceName }));\r\n\r\n        console.log(possibleRemainingEvidence)\r\n\r\n        this.setState({\r\n            possibleGhosts: possibleGhosts,\r\n            impossibleGhosts: impossibleGhosts,\r\n            possibleRemainingEvidence: possibleRemainingEvidence\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <EvidenceOptions\r\n                    toggleEvidence={this.toggleEvidence}\r\n                    evidence={this.state.evidence} />\r\n                <hr />\r\n                <ListContainer\r\n                    title=\"Possible Remaining Evidence\"\r\n                    contentList={this.state.possibleRemainingEvidence}\r\n                />\r\n                <hr />\r\n                <ListContainer\r\n                    title=\"Possible Ghosts\"\r\n                    contentList={this.state.possibleGhosts}\r\n                />\r\n                <hr />\r\n                <ListContainer\r\n                    title=\"Impossible Ghosts\"\r\n                    contentList={this.state.impossibleGhosts}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// im thinking of having a box of all the evidences\r\n// they will be clickable labels that glow when selected\r\n\r\n// choices will have the unselectable evidence be grayed out\r\n// on selection a box listing all impossible evidence will pop up? (see if this is redundant)\r\n\r\n\r\n// Selection area (EvidenceOptions)\r\n\r\n// Possible remaining evidence\r\n// Impossible evidence\r\n// Possible ghosts\r\n// Impossible ghosts\r\n\r\n//^ Maybe all of these can be in one component (ListContainer.js?)\r\n// and just have render methods for each section\r\n\r\n// ^ for these sections see if you can have a hide/show button??\r\n// maybe animations for shrinking and growing when they get bigger\r\n\r\nexport default EvidenceContainer;","import EvidenceContainer from './components/EvidenceContainer'\nimport './styles/Styles.css'\n\nfunction App() {\n  return (\n    <div>\n      <EvidenceContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}