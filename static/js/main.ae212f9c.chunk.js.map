{"version":3,"sources":["constants/constants.js","components/EvidenceOptions.js","components/ListContainer.js","components/EvidenceContainer.js","App.js","reportWebVitals.js","index.js"],"names":["evidenceDictionary","emfLevelFive","ghostWriting","fingerPrints","spiritBox","freezingTemperatures","ghostOrb","ghostList","name","evidence","EvidenceOptions","props","console","log","toggleEvidence","className","Object","keys","map","e","isSelected","disabled","isDisabled","onClick","renderEvidence","reset","ListContainer","title","contentList","content","EvidenceContainer","getInitialState","evidenceObject","forEach","possibleGhosts","impossibleGhosts","possibleRemainingEvidence","impossibleRemainingEvidence","renderGhosts","ghost","evidenceKey","updatedEvidence","state","calculateEvidenceStates","resetState","setState","currentEvidence","selectedEvidenceNames","filter","eKey","allPossibleEvidence","Set","every","includes","push","add","possibleRemainingEvidenceNames","Array","from","impossibleRemainingEvidenceNames","values","selectedEvidence","this","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae212f9c.chunk.js","sourcesContent":["const evidenceDictionary = {\r\n    emfLevelFive: 'EMF Level 5',\r\n    ghostWriting: 'Ghost Writing',\r\n    fingerPrints: 'Fingerprints',\r\n    spiritBox: 'Spirit Box',\r\n    freezingTemperatures: 'Freezing Temperatures',\r\n    ghostOrb: 'Ghost Orb'\r\n};\r\n\r\nconst ghostList = [\r\n    {\r\n        name: 'Banshee',\r\n        evidence: ['EMF Level 5', 'Fingerprints', 'Freezing Temperatures']\r\n    },\r\n    {\r\n        name: 'Demon',\r\n        evidence: ['Ghost Writing', 'Spirit Box', 'Freezing Temperatures']\r\n    },\r\n    {\r\n        name: 'Jinn',\r\n        evidence: ['EMF Level 5', 'Spirit Box', 'Ghost Orb']\r\n    },\r\n    {\r\n        name: 'Mare',\r\n        evidence: ['Spirit Box', 'Freezing Temperatures', 'Ghost Orb']\r\n    },\r\n    {\r\n        name: 'Oni',\r\n        evidence: ['EMF Level 5', 'Ghost Writing', 'Spirit Box']\r\n    },\r\n    {\r\n        name: 'Phantom',\r\n        evidence: ['EMF Level 5', 'Freezing Temperatures', 'Ghost Orb']\r\n    },\r\n    {\r\n        name: 'Poltergeist',\r\n        evidence: ['Fingerprints', 'Spirit Box', 'Ghost Orb']\r\n    },\r\n    {\r\n        name: 'Revenant',\r\n        evidence: ['EMF Level 5', 'Ghost Writing', 'Fingerprints']\r\n    },\r\n    {\r\n        name: 'Shade',\r\n        evidence: ['EMF Level 5', 'Ghost Writing', 'Ghost Orb']\r\n    },\r\n    {\r\n        name: 'Spirit',\r\n        evidence: ['Ghost Writing', 'Fingerprints', 'Spirit Box']\r\n    },\r\n    {\r\n        name: 'Wraith',\r\n        evidence: ['Fingerprints', 'Spirit Box', 'Freezing Temperatures']\r\n    },\r\n    {\r\n        name: 'Yurei',\r\n        evidence: ['Ghost Writing', 'Freezing Temperatures', 'Ghost Orb']\r\n    }\r\n];\r\n\r\nexport { ghostList, evidenceDictionary }","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst EvidenceOptions = (props) => {\r\n    console.log(\"rerendered\")\r\n    \r\n    const renderEvidence = () => {\r\n        const { toggleEvidence, evidence } = props;\r\n\r\n        return <div className=\"evidenceOptionsContainer\">\r\n            {Object.keys(evidence).map(e =>\r\n                <button\r\n                    className={evidence[e].isSelected ? \"glow\" : \"\"}\r\n                    key={e}\r\n                    disabled={evidence[e].isDisabled}\r\n                    onClick={() => toggleEvidence(e)}>\r\n                    {evidence[e].name}\r\n                </button>)}\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Click the Evidence Names Below to Begin</h2>\r\n            {renderEvidence()}\r\n            <button onClick={props.reset}>Clear</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nEvidenceOptions.propTypes = {\r\n    toggleEvidence: PropTypes.func.isRequired,\r\n    reset: PropTypes.func.isRequired,\r\n    evidence: PropTypes.object.isRequired\r\n}\r\n\r\nexport default EvidenceOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ListContainer = (props) => {\r\n    let renderContents = () => {\r\n        return <div className=\"listContainer\">\r\n            {props.contentList.map(content =>\r\n                <div\r\n                    key={content.name}>\r\n                    {content.name}\r\n                </div>)}\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>{props.title}</h2>\r\n            {renderContents()}\r\n        </div>\r\n    )\r\n}\r\n\r\nListContainer.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    contentList: PropTypes.array.isRequired\r\n}\r\n\r\nexport default ListContainer;","import React, { Component } from 'react';\r\nimport { evidenceDictionary, ghostList } from '../constants/constants'\r\nimport EvidenceOptions from './EvidenceOptions';\r\nimport ListContainer from './ListContainer';\r\n\r\nclass EvidenceContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.getInitialState();\r\n    }\r\n\r\n    getInitialState = () => {\r\n        let evidenceObject = {}\r\n\r\n        Object.keys(evidenceDictionary).forEach(e => evidenceObject[e] = {\r\n            name: evidenceDictionary[e],\r\n            isSelected: false,\r\n            isDisabled: false\r\n        });\r\n\r\n        return {\r\n            evidence: evidenceObject,\r\n            possibleGhosts: ghostList,\r\n            impossibleGhosts: [],\r\n            possibleRemainingEvidence: [],\r\n            impossibleRemainingEvidence: []\r\n        }\r\n    }\r\n\r\n    renderGhosts = () => {\r\n        return ghostList.map(ghost => {\r\n            return <div>\r\n                <div><b>{ghost.name}</b></div>\r\n                <div>{ghost.evidence[0]}</div>\r\n                <div>{ghost.evidence[1]}</div>\r\n                <div>{ghost.evidence[2]}</div>\r\n                <hr />\r\n            </div>\r\n        })\r\n    }\r\n\r\n    toggleEvidence = (evidenceKey) => {\r\n        let updatedEvidence = this.state.evidence;\r\n\r\n        updatedEvidence[evidenceKey].isSelected = !updatedEvidence[evidenceKey].isSelected;\r\n\r\n        this.calculateEvidenceStates(updatedEvidence);\r\n    }\r\n\r\n    resetState = () => {\r\n        this.setState(this.getInitialState());\r\n    }\r\n\r\n    calculateEvidenceStates = (currentEvidence) => {\r\n        const selectedEvidenceNames = Object.keys(currentEvidence)\r\n            .filter((eKey) => currentEvidence[eKey].isSelected)\r\n            .map(eKey => currentEvidence[eKey].name);\r\n\r\n        const possibleGhosts = [];\r\n        const impossibleGhosts = [];\r\n\r\n        const allPossibleEvidence = new Set();\r\n\r\n        ghostList.forEach(ghost => {\r\n            if (selectedEvidenceNames\r\n                .every(evidence => ghost.evidence\r\n                    .includes(evidence))) {\r\n                possibleGhosts.push(ghost);\r\n\r\n                ghost.evidence.forEach(e => allPossibleEvidence.add(e))\r\n\r\n            } else {\r\n                impossibleGhosts.push(ghost);\r\n            }\r\n        });\r\n\r\n        const possibleRemainingEvidenceNames = Array.from(allPossibleEvidence).filter(e => !selectedEvidenceNames.includes(e));\r\n        const impossibleRemainingEvidenceNames = Object.values(evidenceDictionary).filter(e => !possibleRemainingEvidenceNames.includes(e) && !selectedEvidenceNames.includes(e));\r\n\r\n        Object.keys(currentEvidence).forEach(eKey => {\r\n            if (impossibleRemainingEvidenceNames.includes(currentEvidence[eKey].name)) {\r\n                currentEvidence[eKey].isDisabled = true;\r\n            } else {\r\n                currentEvidence[eKey].isDisabled = false;\r\n            }\r\n        })\r\n\r\n        this.setState({\r\n            possibleGhosts: possibleGhosts,\r\n            impossibleGhosts: impossibleGhosts,\r\n            possibleRemainingEvidence: possibleRemainingEvidenceNames.map(e => ({name: e})),\r\n            impossibleRemainingEvidence: impossibleRemainingEvidenceNames.map(e => ({name: e})),\r\n            selectedEvidence: currentEvidence\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <EvidenceOptions\r\n                    toggleEvidence={this.toggleEvidence}\r\n                    evidence={this.state.evidence}\r\n                    reset={this.resetState}/>\r\n                <hr />\r\n                <ListContainer\r\n                    title=\"Possible Remaining Evidence\"\r\n                    contentList={this.state.possibleRemainingEvidence}\r\n                />\r\n                <hr />\r\n                <ListContainer\r\n                    title=\"Possible Ghosts\"\r\n                    contentList={this.state.possibleGhosts}\r\n                />\r\n                <hr />\r\n                <ListContainer\r\n                    title=\"Impossible Ghosts\"\r\n                    contentList={this.state.impossibleGhosts}\r\n                />\r\n                <hr />\r\n                <ListContainer\r\n                    title=\"Impossible Evidence\"\r\n                    contentList={this.state.impossibleRemainingEvidence}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// im thinking of having a box of all the evidences\r\n// they will be clickable labels that glow when selected\r\n\r\n// choices will have the unselectable evidence be grayed out\r\n// on selection a box listing all impossible evidence will pop up? (see if this is redundant)\r\n\r\n\r\n// Selection area (EvidenceOptions)\r\n\r\n// Possible remaining evidence\r\n// Impossible evidence\r\n// Possible ghosts\r\n// Impossible ghosts\r\n\r\n//^ Maybe all of these can be in one component (ListContainer.js?)\r\n// and just have render methods for each section\r\n\r\n// ^ for these sections see if you can have a hide/show button??\r\n// maybe animations for shrinking and growing when they get bigger\r\n\r\nexport default EvidenceContainer;","import EvidenceContainer from './components/EvidenceContainer'\nimport './styles/Styles.css'\n\nfunction App() {\n  return (\n    <div>\n      <EvidenceContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}